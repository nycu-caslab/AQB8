    /* Autogenerated file -- do not edit
     * generated by gen_enum_to_str.py
     *
     * Copyright Â© 2017 Intel Corporation
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
     */

    #ifndef MESA_VK_ENUM_TO_STR_H
    #define MESA_VK_ENUM_TO_STR_H

    #include <vulkan/vulkan.h>
    #include <vulkan/vk_android_native_buffer.h>

    #ifdef __cplusplus
    extern "C" {
    #endif

    const char * vk_AccelerationStructureBuildTypeKHR_to_str(VkAccelerationStructureBuildTypeKHR input);
    const char * vk_AccelerationStructureCompatibilityKHR_to_str(VkAccelerationStructureCompatibilityKHR input);
    const char * vk_AccelerationStructureMemoryRequirementsTypeNV_to_str(VkAccelerationStructureMemoryRequirementsTypeNV input);
    const char * vk_AccelerationStructureMotionInstanceTypeNV_to_str(VkAccelerationStructureMotionInstanceTypeNV input);
    const char * vk_AccelerationStructureTypeKHR_to_str(VkAccelerationStructureTypeKHR input);
    const char * vk_AttachmentLoadOp_to_str(VkAttachmentLoadOp input);
    const char * vk_AttachmentStoreOp_to_str(VkAttachmentStoreOp input);
    const char * vk_BlendFactor_to_str(VkBlendFactor input);
    const char * vk_BlendOp_to_str(VkBlendOp input);
    const char * vk_BlendOverlapEXT_to_str(VkBlendOverlapEXT input);
    const char * vk_BorderColor_to_str(VkBorderColor input);
    const char * vk_BuildAccelerationStructureModeKHR_to_str(VkBuildAccelerationStructureModeKHR input);
    const char * vk_BuildMicromapModeEXT_to_str(VkBuildMicromapModeEXT input);
    const char * vk_ChromaLocation_to_str(VkChromaLocation input);
    const char * vk_CoarseSampleOrderTypeNV_to_str(VkCoarseSampleOrderTypeNV input);
    const char * vk_ColorSpaceKHR_to_str(VkColorSpaceKHR input);
    const char * vk_CommandBufferLevel_to_str(VkCommandBufferLevel input);
    const char * vk_CompareOp_to_str(VkCompareOp input);
    const char * vk_ComponentSwizzle_to_str(VkComponentSwizzle input);
    const char * vk_ComponentTypeNV_to_str(VkComponentTypeNV input);
    const char * vk_ConservativeRasterizationModeEXT_to_str(VkConservativeRasterizationModeEXT input);
    const char * vk_CopyAccelerationStructureModeKHR_to_str(VkCopyAccelerationStructureModeKHR input);
    const char * vk_CopyMicromapModeEXT_to_str(VkCopyMicromapModeEXT input);
    const char * vk_CoverageModulationModeNV_to_str(VkCoverageModulationModeNV input);
    const char * vk_CoverageReductionModeNV_to_str(VkCoverageReductionModeNV input);
    const char * vk_DebugReportObjectTypeEXT_to_str(VkDebugReportObjectTypeEXT input);
    const char * vk_DescriptorType_to_str(VkDescriptorType input);
    const char * vk_DescriptorUpdateTemplateType_to_str(VkDescriptorUpdateTemplateType input);
    const char * vk_DeviceAddressBindingTypeEXT_to_str(VkDeviceAddressBindingTypeEXT input);
    const char * vk_DeviceEventTypeEXT_to_str(VkDeviceEventTypeEXT input);
    const char * vk_DeviceFaultAddressTypeEXT_to_str(VkDeviceFaultAddressTypeEXT input);
    const char * vk_DeviceFaultVendorBinaryHeaderVersionEXT_to_str(VkDeviceFaultVendorBinaryHeaderVersionEXT input);
    const char * vk_DeviceMemoryReportEventTypeEXT_to_str(VkDeviceMemoryReportEventTypeEXT input);
    const char * vk_DirectDriverLoadingModeLUNARG_to_str(VkDirectDriverLoadingModeLUNARG input);
    const char * vk_DiscardRectangleModeEXT_to_str(VkDiscardRectangleModeEXT input);
    const char * vk_DisplayEventTypeEXT_to_str(VkDisplayEventTypeEXT input);
    const char * vk_DisplayPowerStateEXT_to_str(VkDisplayPowerStateEXT input);
    const char * vk_DriverId_to_str(VkDriverId input);
    const char * vk_DynamicState_to_str(VkDynamicState input);
    const char * vk_Filter_to_str(VkFilter input);
    const char * vk_Format_to_str(VkFormat input);
    const char * vk_FragmentShadingRateCombinerOpKHR_to_str(VkFragmentShadingRateCombinerOpKHR input);
    const char * vk_FragmentShadingRateNV_to_str(VkFragmentShadingRateNV input);
    const char * vk_FragmentShadingRateTypeNV_to_str(VkFragmentShadingRateTypeNV input);
    const char * vk_FrontFace_to_str(VkFrontFace input);
#ifdef VK_USE_PLATFORM_WIN32_KHR
    const char * vk_FullScreenExclusiveEXT_to_str(VkFullScreenExclusiveEXT input);
#endif
    const char * vk_GeometryTypeKHR_to_str(VkGeometryTypeKHR input);
    const char * vk_ImageLayout_to_str(VkImageLayout input);
    const char * vk_ImageTiling_to_str(VkImageTiling input);
    const char * vk_ImageType_to_str(VkImageType input);
    const char * vk_ImageViewType_to_str(VkImageViewType input);
    const char * vk_IndexType_to_str(VkIndexType input);
    const char * vk_IndirectCommandsTokenTypeNV_to_str(VkIndirectCommandsTokenTypeNV input);
    const char * vk_InternalAllocationType_to_str(VkInternalAllocationType input);
    const char * vk_LineRasterizationModeEXT_to_str(VkLineRasterizationModeEXT input);
    const char * vk_LogicOp_to_str(VkLogicOp input);
    const char * vk_MemoryOverallocationBehaviorAMD_to_str(VkMemoryOverallocationBehaviorAMD input);
    const char * vk_MicromapTypeEXT_to_str(VkMicromapTypeEXT input);
    const char * vk_ObjectType_to_str(VkObjectType input);
    const char * vk_OpacityMicromapFormatEXT_to_str(VkOpacityMicromapFormatEXT input);
    const char * vk_OpacityMicromapSpecialIndexEXT_to_str(VkOpacityMicromapSpecialIndexEXT input);
    const char * vk_OpticalFlowPerformanceLevelNV_to_str(VkOpticalFlowPerformanceLevelNV input);
    const char * vk_OpticalFlowSessionBindingPointNV_to_str(VkOpticalFlowSessionBindingPointNV input);
    const char * vk_PerformanceConfigurationTypeINTEL_to_str(VkPerformanceConfigurationTypeINTEL input);
    const char * vk_PerformanceCounterScopeKHR_to_str(VkPerformanceCounterScopeKHR input);
    const char * vk_PerformanceCounterStorageKHR_to_str(VkPerformanceCounterStorageKHR input);
    const char * vk_PerformanceCounterUnitKHR_to_str(VkPerformanceCounterUnitKHR input);
    const char * vk_PerformanceOverrideTypeINTEL_to_str(VkPerformanceOverrideTypeINTEL input);
    const char * vk_PerformanceParameterTypeINTEL_to_str(VkPerformanceParameterTypeINTEL input);
    const char * vk_PerformanceValueTypeINTEL_to_str(VkPerformanceValueTypeINTEL input);
    const char * vk_PhysicalDeviceType_to_str(VkPhysicalDeviceType input);
    const char * vk_PipelineBindPoint_to_str(VkPipelineBindPoint input);
    const char * vk_PipelineCacheHeaderVersion_to_str(VkPipelineCacheHeaderVersion input);
    const char * vk_PipelineExecutableStatisticFormatKHR_to_str(VkPipelineExecutableStatisticFormatKHR input);
    const char * vk_PipelineRobustnessBufferBehaviorEXT_to_str(VkPipelineRobustnessBufferBehaviorEXT input);
    const char * vk_PipelineRobustnessImageBehaviorEXT_to_str(VkPipelineRobustnessImageBehaviorEXT input);
    const char * vk_PointClippingBehavior_to_str(VkPointClippingBehavior input);
    const char * vk_PolygonMode_to_str(VkPolygonMode input);
    const char * vk_PresentModeKHR_to_str(VkPresentModeKHR input);
    const char * vk_PrimitiveTopology_to_str(VkPrimitiveTopology input);
    const char * vk_ProvokingVertexModeEXT_to_str(VkProvokingVertexModeEXT input);
    const char * vk_QueryPoolSamplingModeINTEL_to_str(VkQueryPoolSamplingModeINTEL input);
    const char * vk_QueryResultStatusKHR_to_str(VkQueryResultStatusKHR input);
    const char * vk_QueryType_to_str(VkQueryType input);
    const char * vk_QueueGlobalPriorityKHR_to_str(VkQueueGlobalPriorityKHR input);
    const char * vk_RasterizationOrderAMD_to_str(VkRasterizationOrderAMD input);
    const char * vk_RayTracingInvocationReorderModeNV_to_str(VkRayTracingInvocationReorderModeNV input);
    const char * vk_RayTracingShaderGroupTypeKHR_to_str(VkRayTracingShaderGroupTypeKHR input);
    const char * vk_Result_to_str(VkResult input);
    const char * vk_SamplerAddressMode_to_str(VkSamplerAddressMode input);
    const char * vk_SamplerMipmapMode_to_str(VkSamplerMipmapMode input);
    const char * vk_SamplerReductionMode_to_str(VkSamplerReductionMode input);
    const char * vk_SamplerYcbcrModelConversion_to_str(VkSamplerYcbcrModelConversion input);
    const char * vk_SamplerYcbcrRange_to_str(VkSamplerYcbcrRange input);
    const char * vk_ScopeNV_to_str(VkScopeNV input);
    const char * vk_SemaphoreType_to_str(VkSemaphoreType input);
    const char * vk_ShaderFloatControlsIndependence_to_str(VkShaderFloatControlsIndependence input);
    const char * vk_ShaderGroupShaderKHR_to_str(VkShaderGroupShaderKHR input);
    const char * vk_ShaderInfoTypeAMD_to_str(VkShaderInfoTypeAMD input);
    const char * vk_ShadingRatePaletteEntryNV_to_str(VkShadingRatePaletteEntryNV input);
    const char * vk_SharingMode_to_str(VkSharingMode input);
    const char * vk_StencilOp_to_str(VkStencilOp input);
    const char * vk_StructureType_to_str(VkStructureType input);
    const char * vk_SubpassContents_to_str(VkSubpassContents input);
    const char * vk_SubpassMergeStatusEXT_to_str(VkSubpassMergeStatusEXT input);
    const char * vk_SystemAllocationScope_to_str(VkSystemAllocationScope input);
    const char * vk_TessellationDomainOrigin_to_str(VkTessellationDomainOrigin input);
    const char * vk_TimeDomainEXT_to_str(VkTimeDomainEXT input);
    const char * vk_ValidationCacheHeaderVersionEXT_to_str(VkValidationCacheHeaderVersionEXT input);
    const char * vk_ValidationCheckEXT_to_str(VkValidationCheckEXT input);
    const char * vk_ValidationFeatureDisableEXT_to_str(VkValidationFeatureDisableEXT input);
    const char * vk_ValidationFeatureEnableEXT_to_str(VkValidationFeatureEnableEXT input);
    const char * vk_VendorId_to_str(VkVendorId input);
    const char * vk_VertexInputRate_to_str(VkVertexInputRate input);
#ifdef VK_ENABLE_BETA_EXTENSIONS
    const char * vk_VideoEncodeH264RateControlStructureEXT_to_str(VkVideoEncodeH264RateControlStructureEXT input);
#endif
#ifdef VK_ENABLE_BETA_EXTENSIONS
    const char * vk_VideoEncodeH265RateControlStructureEXT_to_str(VkVideoEncodeH265RateControlStructureEXT input);
#endif
#ifdef VK_ENABLE_BETA_EXTENSIONS
    const char * vk_VideoEncodeTuningModeKHR_to_str(VkVideoEncodeTuningModeKHR input);
#endif
    const char * vk_ViewportCoordinateSwizzleNV_to_str(VkViewportCoordinateSwizzleNV input);

    size_t vk_structure_type_size(const struct VkBaseInStructure *item);

    const char * vk_ObjectType_to_ObjectName(VkObjectType type);

    #ifdef __cplusplus
    } /* extern "C" */
    #endif

    #endif